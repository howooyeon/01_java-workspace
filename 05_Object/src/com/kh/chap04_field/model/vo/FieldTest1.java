package com.kh.chap04_field.model.vo;

/*
 * >> 변수 구분
 * 
 *  - 전역변수 : 클래스 영역에 바로 선언한 변수 --> 클래스 내에서면 어디서든 전역으로 다 사용가능 (외우는 팁! 전체지역!)
 *  - 지역변수 : 클래스 영역내에 어떤 특정한 구역 ({}) 에 선언한 변수 --> 선언된 해당 그 지역에서만 사용 가능하다.
 *  		  * 특정한 구역 : 메소드 {}, 제어문 (if, for){} 등등
 *  		
 *  1. 전역변수
 *  - 필드 == 멤버변수 == 인스턴스 변수 
 *  생성시점 : new 연산자를 통해서 객체 생성시
 *  소멸시점 : 객체 소멸시 같이 소멸
 *  
 *  - 클래스 변수 == static 변수 => 예약어 쓸 수 있는데 static이라는걸 쓰면 클래스 변수가 됨
 *    생성시점 : 프로그램 실행(해당 객체 생성 안돼도)과 동시에 무조건 메모리 영역(static) 영역
 *    소멸시점 : 프로그램이 종료될 때 소멸
 *  
 * 
 *  2. 지역변수
 *  생성시점 : 지역변수가 속해있는 특정한 구역({}) 실행(호출)시 메모리 영역에 할당
 *  소멸시점 : 특정한 구역({}) 종료시 소멸
 *  
 */

public class FieldTest1 { // 클래스 영역 시작
	
	
	/*
	 * // 전역변수
	 * private int a;
	 * 
	 * public void method1() { int b = 10; // 클래스 입장에서는 지역변수가 맞으나 메소드 입장에서는 전역변수임
	 * System.out.println(b);
	 * 
	 * if(true) {
	 * int c = 20; 
	 * 	}
	 * 
	 * }
	 */

	// 전역변수(인스턴스 변수, 멤버변수)
	private int global;
	
	public void test(int num) { // 테스트 메소드 시작
		// 매개변수(일종의 지역변수 즉, 메소드 영역 내에서만 쓸 수 있음)
		
		// 지역변수(메소드 영역내에 선언) => 지역변수에는 접근제한자 같은 거 붙이는 거 아님
		int local = 0;
		
		// 멤버변수 출력 => 멤버변수는 해당 이 객체 생성시 JVM이 기본값으로라도 초기화 // 힙 영역에 있어서 이미 0으로 초기화 되어 있음
		System.out.println(global); // 초기화가 안돼 있음. 근데 오류 안남. heap영역에 생성될 때 초기화
		
		// 매개변수 출력 => 매개변수는 해당 이 메소드를 호출시 반드시 값이 전달될 거기 때문에 초기화 안 되어 있어도 됨.
		System.out.println(num); // 초기화 안 되어 있음. 근데 오류 안남. 매개변수로 무조건 하나는 넘어올 거니까
		
		// 지역변수 출력
		System.out.println(local); // 초기화 안 돼있음. 이건 오류남
		
		
	} // 테스트 메소도 영역 끝
	
	
	
} // 클래스 영역 끝
